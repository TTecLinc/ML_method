#Yang 2019/3/16
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm

#Fama-French Index Model
'''
huaxia_data=pd.read_table('...')
huaxia_data=huaxia_data[huaxia_data['Stkcd']==600015]
huaxia_data.index=pd.to_datetime(huaxia_data['Trddt'])
huaxia_data=huaxia_data['Dretwd']

factor_data=pd.read_table('...')
factor_data.index=pd.to_datetime(factor_data['TradingDate'])
factor_data=factor_data[huaxia_data.index[0]:]
factor_data=factor_data.iloc[:,[3,5,7]]
huaxia_data=pd.DataFrame(huaxia_data[:factor_data.index[-1]])

Ret=pd.merge(huaxia_data,factor_data,how='inner',left_index=True,right_index=True)

plt.subplot(2,2,1)
plt.scatter(Ret['RiskPremium2'],Ret['Dretwd'])
plt.subplot(2,2,2)
plt.scatter(Ret['SMB2'],Ret['Dretwd'])
plt.subplot(2,2,3)
plt.scatter(Ret['HML2'],Ret['Dretwd'])

model=sm.OLS(Ret['Dretwd'],sm.add_constant(Ret.iloc[:,1:4]))
result=model.fit()
parameters=result.params
print(result.summary())
parameters.name='Parameters'
'''

stock_data=pd.read_csv('...')
xin_an_data=pd.read_csv('...').iloc[:,1:]
#Risk-free interest rate
R_f=(1+0.036)**(1/360)-1
#remove the volume is zero
xin_an_data=xin_an_data[xin_an_data['Volume']!=0]
#Move forward one day

#The series of xinan return 
xin_an_return=(xin_an_data['Close']-xin_an_data['Close'].shift(1))/xin_an_data['Close'].shift(1)
xin_an_return.index=pd.to_datetime(xin_an_data['Date'])

stock_data=stock_data[stock_data['Indexcd']==902]
index_return=pd.Series(stock_data['Retindex'].values,index=pd.to_datetime(stock_data['Trddt'].values))
index_return.name='Return'
#to_Datatime can be comparable

xin_an_return=xin_an_return.dropna()
xin_an_return.name='Return'
xin_an_return=xin_an_return-R_f
#costruct a list
index_return=index_return[[index for index in xin_an_return.index]]
index_return=index_return-R_f

Ret=pd.merge(pd.DataFrame(xin_an_return),pd.DataFrame(index_return),how='inner',left_index=True,right_index=True)

plt.scatter(xin_an_return,index_return)
#Y and X(dependent var and independent var)

gls_model=sm.GLS(Ret['Return_x'],sm.add_constant(Ret['Return_y']))
gls_model_result=gls_model.fit()
print(gls_model_result.summary())
X=np.linspace(-0.1,0.1,10)
plt.plot(X,1.1293*X-0.0017)
